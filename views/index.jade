!!!
html
  head
    meta(charset="utf-8")
    title Mellonine
    style.
      body {font-family: sans-serif}
      input {
        border: 1px solid gray;
        padding: 2px;
      }
      input:invalid {
        background-color: #fdd;
      }
  body
    h2 What is Mellonine?
    p.
      Mellonine is a Twimlet-style Twilio app that handles calls and texts.
    p.
      It's not a purely stateless app, as SMS messages can set a token that
      voice calls can check to skip the passcode-dialing step and allow direct
      entry.

    h2 How to use Mellonine
    p.
      Use this form to construct the URLs to direct your app to. (For more
      in-depth documentation, view the
      <a href="https://github.com/stuartpb/mellonine/blob/master/app.js">source</a>.)
    p.
      NOTE: Some security systems may silence touch tones after a certain length.
      Also, Twilio thinks my apartment's '#' sounds like '3'.
      Keep these flaws / features in mind (you may wish to test your own system's
      behavior for such limitations).
    fieldset
      legend Generator
      fieldset#options
        legend Options
        label="Door passcode: "
          input#doorcode(type="text",pattern="[\\d\\#\\*]+")
        label="SMS passcode: "
          input#smscode(type="text",maxlength=160)
        div
          label="Unlock token identifier: "
            input#unlock-token(type="text")
          button(onclick="generateRandomIdentifier()") Generate
        div
          label="SMS unlock expires after: "
            input#ttl(type="number",min=0,step=1,value=300)
            =" seconds"
        div
          label="Voice prompt: "
            input#prompt(type="text",placeholder="Enter the passcode")
        fieldset
          legend Passcode dialing
          label="Submit key: "
            input#finish-on-key(type="text",pattern="[\\d\\#\\*]?",maxlength=1)
          label="Max length: "
            input#num-digits(type="number",min=1,step=1)
          label="Timeout: "
            input#gather-timeout(type="number",min=0,step=1,value=5)
            =" seconds"
        div
          label="Wait before picking up: "
            input#sleep(type="number",min=0,step=1,value=0)
            =" seconds"
        div
          label="Unlock tone: "
            input#unlock-tone(type="text",pattern="[\\d\\#\\*]+",placeholder='9')
      fieldset
        legend Resulting URLs
        p
          a#voice-url(href="https://mellonine.herokuapp.com/voice?") https://mellonine.herokuapp.com/voice?
        p
          a#sms-url(href="https://mellonine.herokuapp.com/sms?") https://mellonine.herokuapp.com/sms?
    script.
      function generateRandomIdentifier() {
        document.getElementById('unlock-token').value =
          Array.apply(0, Array(16)).map(function() {
            return (function(charset){
              return charset.charAt(Math.floor(Math.random() * charset.length))
            }('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'));
        }).join('');
      }
      function updateState() {
        function getval(id) {return document.getElementById(id).value}
        var doorcode = getval('doorcode');
        var smscode = getval('smscode');
        var ttl = getval('ttl');
        var prompt = getval('prompt');
        var finishOnKey = getval('finish-on-key');
        var numDigits = getval('num-digits');
        var gatherTimeout = getval('gather-timeout');
        var sleep = getval('sleep');
        var unlockTone = getval('unlock-tone');
        var unlockToken = getval('unlock-token');

        var voiceParams = [];
        var smsParams = [];

        document.getElementById('smscode').placeholder = doorcode;

        if (unlockToken && (doorcode || smscode)) {
          voiceParams.push('unlockToken=' + encodeURIComponent(unlockToken));
          smsParams.push('unlockToken=' + encodeURIComponent(unlockToken));

          // Only add parameters to the SMS URL if they'll be in a
          // valid state to be used.
          if (ttl) smsParams.push('ttl=' + encodeURIComponent(ttl));

          smsParams.push('passcode=' +
            encodeURIComponent(smscode ? smscode : doorcode));
        }

        if (doorcode)
          voiceParams.push('passcode=' + encodeURIComponent(doorcode));

        if (sleep > 0) voiceParams.push('sleep=' + encodeURIComponent(sleep));
        if (prompt) voiceParams.push('prompt=' + encodeURIComponent(prompt));
        if (finishOnKey) voiceParams.push('finishOnKey=' + encodeURIComponent(finishOnKey));
        if (numDigits) voiceParams.push('numDigits=' + encodeURIComponent(numDigits));
        if (gatherTimeout != 5) voiceParams.push('gatherTimeout=' + encodeURIComponent(gatherTimeout));
        if (unlockTone) voiceParams.push('unlockTone=' + encodeURIComponent(unlockTone));

        var voiceUrl = "https://mellonine.herokuapp.com/voice?" + voiceParams.join('&');
        var smsUrl = "https://mellonine.herokuapp.com/sms?" + smsParams.join('&');

        var voiceUrlElement = document.getElementById('voice-url');
        voiceUrlElement.href = voiceUrl;
        voiceUrlElement.textContent = voiceUrl;
        var smsUrlElement = document.getElementById('sms-url');
        smsUrlElement.href = smsUrl;
        smsUrlElement.textContent = smsUrl;
      }

      var inputs = document.getElementById('options').getElementsByTagName('input');

      for (var i = 0; i < inputs.length; i++) {
        var input = inputs[i];
        input.addEventListener("keyup",updateState);
        input.addEventListener("change",updateState);
      }

      updateState();

